{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Skill Assessment Service:",
    "version": "1.0.0"
  },
  "host": "localhost:8084",
  "basePath": "/",
  "paths": {
    "/api/categories": {
      "get": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Fetch all categories",
        "tags": [
          "category"
        ],
        "operationId": "listCategories",
        "responses": {
          "200": {
            "$ref": "#/responses/CategoriesResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/category": {
      "post": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Add new category",
        "tags": [
          "category"
        ],
        "operationId": "CategoryRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ConflictErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "description": "Health of the application",
        "tags": [
          "miscellaneous"
        ],
        "operationId": "health",
        "responses": {
          "200": {
            "$ref": "#/responses/HealthResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/question/{Category}": {
      "post": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Add new question based on category",
        "tags": [
          "questions"
        ],
        "operationId": "QuestionRequest",
        "parameters": [
          {
            "type": "string",
            "example": "go",
            "name": "Category",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ConflictErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/questions/{Category}": {
      "get": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Add new question based on category",
        "tags": [
          "questions"
        ],
        "operationId": "GetQuestionRequest",
        "parameters": [
          {
            "type": "string",
            "example": "go",
            "name": "Category",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/QuestionsResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ConflictErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Fetch all categories",
        "tags": [
          "questions"
        ],
        "operationId": "QuestionsRequest",
        "parameters": [
          {
            "type": "string",
            "example": "go",
            "name": "Category",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/user": {
      "post": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          },
          {
            "securityDefinitions": []
          },
          {
            "Bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "requests": []
          }
        ],
        "description": "Create new user",
        "tags": [
          "admin"
        ],
        "operationId": "UserRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/responses/UnAuthenticatedAccessResponse"
          },
          "403": {
            "$ref": "#/responses/UnAuthorizedAccessResponse"
          },
          "409": {
            "$ref": "#/responses/ConflictErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/user/login": {
      "post": {
        "description": "requests:",
        "tags": [
          "user"
        ],
        "summary": "Login with username and password",
        "operationId": "LoginRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/responses/UnAuthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/user/{Username}": {
      "delete": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          },
          {
            "securityDefinitions": []
          },
          {
            "Bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "requests": []
          }
        ],
        "description": "Delete user",
        "tags": [
          "admin"
        ],
        "operationId": "DeleteUserRequest",
        "parameters": [
          {
            "type": "string",
            "example": "username",
            "name": "Username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserDeleteSuccessResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/responses/UnAuthorizedAccessResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/user/{Username}/password": {
      "put": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          },
          {
            "securityDefinitions": []
          },
          {
            "Bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Revoke user",
        "tags": [
          "user"
        ],
        "operationId": "ResetUserPasswordRequest",
        "parameters": [
          {
            "type": "string",
            "example": "admin",
            "name": "Username",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PasswordReset"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResetUserPasswordRequest"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/responses/UnAuthorizedAccessResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/user/{Username}/revoke": {
      "put": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "requests": []
          }
        ],
        "description": "Revoke user",
        "tags": [
          "admin"
        ],
        "operationId": "RevokeUserRequest",
        "parameters": [
          {
            "type": "string",
            "example": "username",
            "name": "Username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserRevokeSuccessResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/responses/UnAuthorizedAccessResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "security": [
          {
            "Bearer": [
              "[]"
            ]
          },
          {
            "securityDefinitions": []
          },
          {
            "Bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get all available users",
        "tags": [
          "admin"
        ],
        "operationId": "listUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/UsersResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/responses/UnAuthorizedAccessResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundEmptyErrorResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "BadRequestError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Invalid parameters"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 400
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "CategoryRequest": {
      "description": "Category Request",
      "type": "object",
      "required": [
        "categoryName",
        "collectionName",
        "author"
      ],
      "properties": {
        "author": {
          "description": "Author of this category",
          "type": "string",
          "minLength": 5,
          "x-go-name": "Author",
          "example": "admin"
        },
        "categoryName": {
          "description": "the category name",
          "type": "string",
          "minLength": 2,
          "x-go-name": "CategoryName",
          "example": "go"
        },
        "collectionName": {
          "description": "the collection name",
          "type": "string",
          "minLength": 2,
          "x-go-name": "CollectionName",
          "example": "go"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/request/category"
    },
    "CategoryResponse": {
      "description": "List of Categories",
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "x-go-name": "Author",
          "example": "admin"
        },
        "categoryName": {
          "type": "string",
          "x-go-name": "CategoryName",
          "example": "go"
        },
        "collectionName": {
          "type": "string",
          "x-go-name": "CollectionName",
          "example": "go"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/category"
    },
    "ConflictError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Already exist"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 409
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "GlobalError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Something went wrong"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 500
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "InvalidTokenError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Invalid token"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 401
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "LoginRequest": {
      "description": "login Request",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "description": "the password for this user",
          "type": "string",
          "minLength": 8,
          "x-go-name": "Password",
          "example": "admin@123"
        },
        "username": {
          "description": "the username for this user",
          "type": "string",
          "x-go-name": "Username",
          "example": "admin"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/request/auth"
    },
    "LoginResponse": {
      "description": "Login Response",
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjU2MjQxNDE4fQ.Apq5YRkhS5UWr7bYgMKihH-GfcdDygKr777zdU5YWmI"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/auth"
    },
    "NotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Not found"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 404
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "PasswordReset": {
      "type": "object",
      "required": [
        "oldPassword",
        "newPassword"
      ],
      "properties": {
        "newPassword": {
          "description": "the new password for this user",
          "type": "string",
          "x-go-name": "NewPassword"
        },
        "oldPassword": {
          "description": "the old password for this user",
          "type": "string",
          "x-go-name": "OldPassword"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/request/user"
    },
    "PasswordResetSuccessResponse": {
      "description": "Success response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Password reset success"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 200
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/success"
    },
    "QuestionRequest": {
      "type": "object",
      "required": [
        "question",
        "options",
        "answer",
        "questionType",
        "author",
        "deleted",
        "deletedBy"
      ],
      "properties": {
        "answer": {
          "description": "Provide correct answer",
          "type": "string",
          "x-go-name": "Answer",
          "example": "good"
        },
        "author": {
          "description": "Provide username of the user who has created this question",
          "type": "string",
          "x-go-name": "Author",
          "example": "admin"
        },
        "deleted": {
          "description": "Is this question deleted?",
          "type": "boolean",
          "x-go-name": "Deleted",
          "example": false
        },
        "deletedBy": {
          "description": "Provide username of the user who has deleted this question",
          "type": "string",
          "x-go-name": "DeletedBy",
          "example": "admin"
        },
        "options": {
          "description": "provide options to choose",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Options",
          "example": [
            "good",
            "excellent"
          ]
        },
        "question": {
          "description": "Provide Question",
          "type": "string",
          "x-go-name": "Question",
          "example": "How are you"
        },
        "questionType": {
          "description": "Provide Question type",
          "type": "string",
          "x-go-name": "QuestionType",
          "example": "checkbox/radio"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/request/question"
    },
    "QuestionResponse": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "x-go-name": "Answer",
          "example": "good"
        },
        "author": {
          "type": "string",
          "x-go-name": "Author",
          "example": "admin"
        },
        "deleted": {
          "type": "boolean",
          "x-go-name": "Deleted",
          "example": false
        },
        "deletedBy": {
          "type": "string",
          "x-go-name": "DeletedBy",
          "example": "admin"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Options",
          "example": [
            "good",
            "Excellent"
          ]
        },
        "question": {
          "type": "string",
          "x-go-name": "Question",
          "example": "How are you?"
        },
        "questionType": {
          "type": "string",
          "x-go-name": "QuestionType",
          "example": "radio"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/question"
    },
    "SuccessResponse": {
      "description": "Success response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Data saved successfully"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 200
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/success"
    },
    "UnAuthenticatedAccessError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "User is not authenticated"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 401
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "UnAuthorizedAccessError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "User is not authorized"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 401
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "UnAuthorizedError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "Invalid username or password"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 400
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/errors"
    },
    "UserDeleteSuccessResponse": {
      "description": "Success response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "User Deleted successfully"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 200
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/success"
    },
    "UserRequest": {
      "description": "User Request",
      "type": "object",
      "required": [
        "username",
        "password",
        "email",
        "role"
      ],
      "properties": {
        "email": {
          "description": "the email for this user",
          "type": "string",
          "x-go-name": "Email",
          "example": "user@provider.com"
        },
        "password": {
          "description": "the password for this user",
          "type": "string",
          "minLength": 8,
          "x-go-name": "Password"
        },
        "role": {
          "description": "the role for this user",
          "type": "string",
          "x-go-name": "Role",
          "example": "manager"
        },
        "username": {
          "description": "the username for this user",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/request/user"
    },
    "UserResponse": {
      "description": "User Response",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active",
          "example": true
        },
        "email": {
          "type": "string",
          "x-go-name": "Email",
          "example": "admin@provider.com"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role",
          "example": "admin"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username",
          "example": "admin"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/user"
    },
    "UserRevokeSuccessResponse": {
      "description": "Success response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "User revoked successfully"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 200
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "TimeStamp",
          "example": "2022-05-20 16:59:05"
        }
      },
      "x-go-package": "github.com/sandy0786/skill-assessment-service/response/success"
    }
  },
  "responses": {
    "BadRequestErrorResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/BadRequestError"
      }
    },
    "CategoriesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CategoryResponse"
        }
      }
    },
    "ConflictErrorResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ConflictError"
      }
    },
    "HealthResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "x-go-name": "Status",
            "example": "UP"
          }
        }
      }
    },
    "InternalServerErrorResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GlobalError"
      }
    },
    "InvalidTokenResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InvalidTokenError"
      }
    },
    "LoginResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/LoginResponse"
      }
    },
    "NotFoundEmptyErrorResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    },
    "NotFoundErrorResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/NotFoundError"
      }
    },
    "PasswordResetSuccessResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/PasswordResetSuccessResponse"
      }
    },
    "QuestionsResponse": {
      "description": "List of questions",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/QuestionResponse"
        }
      }
    },
    "SuccessResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/SuccessResponse"
      }
    },
    "UnAuthenticatedAccessResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UnAuthenticatedAccessError"
      }
    },
    "UnAuthorizedAccessResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UnAuthorizedAccessError"
      }
    },
    "UnAuthorizedResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UnAuthorizedError"
      }
    },
    "UserDeleteSuccessResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UserDeleteSuccessResponse"
      }
    },
    "UserRevokeSuccessResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UserRevokeSuccessResponse"
      }
    },
    "UsersResponse": {
      "description": "List of Users",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/UserResponse"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": [
        "[]"
      ]
    }
  ]
}